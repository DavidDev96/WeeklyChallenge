@page "/add-task"
@inject NavigationManager navigationManager;
@inject IToDoService toDoService;
@inject IUserService userService;
@using System.Globalization;
@using System.Data.SqlClient;
@using System.Data;
@using WeeklyChallenge.Shared;

<PageTitle>Aufgabe hinzufügen</PageTitle>

<h3>Aufgabe hinzufügen:</h3>

<AuthorizeView>
    <NotAuthorized>
        <p>Du bist nicht eingelogt - Daten werden nicht geladen.</p>
    </NotAuthorized>
    <Authorized>
    </Authorized>
</AuthorizeView>


@if (showSavedText)
{
    <p class="alert-warning">Aufgabe gespeichert!</p>
}

<EditForm Model="toDo">
    <div>
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="toDo.Name" class="form-control"></InputText>
    </div>
    <div class="top-spacing">
        <label for="weekNumber">Woche (aktuelle KW ist @currentWeek):</label>
        <InputNumber id="weekNumber" min="1" max="56" @bind-Value="toDo.WeekNumber" class="form-control"></InputNumber>
    </div>
    <div class="top-spacing">
        <label for="user">Wer soll die Aufgabe erledigen?</label>
        <InputSelect class="person-select" id="personId" @bind-Value="toDo.PersonId">
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.FirstName</option>
            }
        </InputSelect>
    </div>
    <button type="button" @onclick="Save" disabled="@(AllValid() ? false : true)" class="btn btn-primary top-spacing">Speichern</button>
    <br />
    <br />
</EditForm>

@code {
    private ToDo toDo = new ToDo();
    private List<User> users = new List<User>();

    public bool showSavedText = false;

    int currentWeek = ISOWeek.GetWeekOfYear(DateTime.Now);
    int currentYear = ISOWeek.GetYear(DateTime.Now);

    protected override async Task OnInitializedAsync()
    {
        await userService.GetUsers();
        users.Add(new User() { Id = "ALL", FirstName = "Alle", Deleted = false });
        users.AddRange(userService.Users.Where(x => !x.Deleted).ToList());

        toDo.WeekNumber = currentWeek;
        toDo.Year = currentYear;
    }

    private bool AllValid()
    {
        return toDo.Name != "" && toDo.WeekNumber > 0 && toDo.WeekNumber <= 56 && toDo.Year != 0;
    }

    private void Save()
    {
        toDo.Id = System.Guid.NewGuid().ToString();
        if (toDo.PersonId == "")
        {
            toDo.PersonId = "ALL";
        }
        toDoService.CreateToDo(toDo);

        toDo.Name = "";
        toDo.WeekNumber = currentWeek;
        toDo.PersonId = "";

        ShowSavedText();
    }

    private async Task ShowSavedText()
    {
        await InvokeAsync(async () => 
          {
              showSavedText = true;
              await Task.Delay(3_000);      // Show text for 3 seconds
              showSavedText = false;
              StateHasChanged();
          });
    }
}
