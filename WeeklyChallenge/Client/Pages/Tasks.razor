@page "/tasks"
@using System.Globalization;
@inject IToDoService toDoService;
@inject IUserService userService;
@inject NavigationManager navigationManager;

<PageTitle>Aufgaben</PageTitle>

<h2>Aufgaben in KW @currentWeek</h2>

<div style="margin-top: 20px;">
    @foreach (var user in users)
    {
        <h3>@user.Name</h3>
        @if (toDosOfWeek.Where(x => x.PersonId == user.Id).ToList().Count == 0)
        {
            <p>Keine Aufgaben</p>
        }
        <ul>
            @foreach (var todo in toDosOfWeek.Where(x => x.PersonId == user.Id).ToList())
            {
                <li>@todo.Name<span class="oi oi-check" style="margin:10px; color: green; cursor:pointer; font-size: 22px;" aria-hidden="true" @onclick="() => FinishToDo(todo.Id, todo)"></span></li>
            }
        </ul>
    }
</div>

<div>
    <button type="button" disabled="@loading" class="btn btn-primary" style="margin-top: 10px;" @onclick="Reload">Aktualisieren</button>
</div>

@code {
    private List<ToDo> toDos = new();
    private List<ToDo> toDosOfWeek = new();
    private List<User> users = new();
    private bool loading;

    int currentWeek = ISOWeek.GetWeekOfYear(DateTime.Now);

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        loading = true;
        await toDoService.GetToDos();
        await userService.GetUsers();

        toDos = toDoService.ToDos.Where(x => !x.Finished).ToList();
        toDosOfWeek = await toDoService.GetActiveToDosOfWeek(currentWeek);
        users = userService.Users.Where(x => !x.Deleted).ToList();
        loading = false;
    }

    private async void FinishToDo(string id, ToDo toDo)
    {
        toDo.Finished = true;
        toDo.FinishedAt = DateTime.Now;
        await toDoService.FinishToDo(id);
        navigationManager.NavigateTo("tasks", true);
    }

    private void Reload()
    {
        navigationManager.NavigateTo("tasks", true);
    }
}
