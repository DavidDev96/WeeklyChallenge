@page "/notFinishedTasks"
@using System.Globalization;
@inject IToDoService toDoService;
@inject IUserService userService;

<PageTitle>Nicht abgeschlossene Aufgaben</PageTitle>

<h3>Nicht abgeschlossene Aufgaben:</h3>

<AuthorizeView>
    <NotAuthorized>
        <p>Du bist nicht eingelogt - Daten werden nicht geladen.</p>
    </NotAuthorized>

    <Authorized>
        @if (loading)
        {
            <span>Aufgaben werden geladen ...</span>
        }

        <div>
            @foreach (var user in users)
            {
                <h3 class="name-spacing">@user.FirstName</h3>

                <table class="top-spacing">
                    <tr>
                        <th>Aufgabe</th>
                        <th class="left-inner-spacing">Woche</th>
                    </tr>
                    @foreach (var todo in toDos.Where(x => x.PersonId == user.Id).ToList())
                    {
                        <tr>
                            <td class="first-column name-column">@todo.Name</td>
                            <td class="second-column left-inner-spacing">@todo.WeekNumber / @todo.Year</td>
                        </tr>
                    }
                </table>

            }
            <br />
            <br />
        </div>
    </Authorized>
</AuthorizeView>




@code {
    private List<ToDo> toDos = new();
    private List<User> users = new();
    private bool loading = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        loading = true;
        await toDoService.GetToDos();
        await userService.GetUsers();

        toDos = toDoService.ToDos.Where(x => !x.Finished).OrderByDescending(x => x.Year).ThenByDescending(x => x.WeekNumber).ToList();
        users = userService.Users;
        loading = false;
    }
}
